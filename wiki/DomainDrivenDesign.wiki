#summary DomainDrivenDesign 领域驱动设计
#labels 领域驱动设计


==领域驱动设计模式==
    Domain Driven Design简称DDD。领域模式对业务逻辑独立封装，隔离与数据访问，实现层与层之间的解耦，提高整个系统的可扩展性，易修改性。
     主要分为数据访问层，数据仓储层，领域层，应用服务层，界面层。
====数据访问层DataAccess====
    提供为仓储层基础的数据库连接已经数据库交互的方法。
====数据仓储层 Repository====
    介于领域和数据库之间的桥梁，提供对象集合形式的数据持久化服务。
{{{
     在代码层面：
     同构模型提供查集合，查单例，增删改等。
     异构模型提供对多表联合查询结果的封装，产出异构模型。
}}}
====领域层Domain====
    包含领域模型和领域服务两部分，领域模型对应实际的业务模型，服务处理业务逻辑。
{{{
     在代码层面：
     业务模型分为两类：
     结构上与表结构相同的业务模型，简称同构模型；
     结构上与表不同的业务模型，简称异构模型
     业务逻辑：
     纯粹的逻辑，代码中不会独立构建缓存，仅对业务模型做逻辑判断，
     并返回结果或对象的修改，大部分的逻辑判断if –else判断都写在这一层中。
}}}
====应用层Application====
    应用层主要是整合数据仓储和领域服务，并向上层WCF提供接口方法，另通过Mapper作为领域模型与数据传输对象Data Transfer Object的映射转换器。
{{{     
     在代码层面：
     作为仓储和业务逻辑的调用者，根据需要缓存业务模型或自定义模型，
     不处理业务逻辑，仅是对业务模型进行缓存和传递，并向上层提供外观。
}}}
====UI层====
     客户端Winform或WPF等通过调用WCF服务，为用户提供前台的数据展现。
====其他====
     Common组件，通用组件为整体框架提供基础的方法，包括AOP，IOC，扩展方法，GUID生成器，配置文件访问器，异常管理器，日志访问类等。
     DTO数据传输对象，粗粒度的数据，用于高效率的网络传输和对业务模型的隐藏。